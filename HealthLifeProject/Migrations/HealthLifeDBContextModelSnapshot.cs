// <auto-generated />
using System;
using HealthLifeProject.Commons;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthLifeProject.Migrations
{
    [DbContext(typeof(HealthLifeDBContext))]
    partial class HealthLifeDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthLifeProject.Entities.Benefactors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NameID")
                        .HasColumnType("int");

                    b.Property<string>("Notate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("SurnameID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleID");

                    b.ToTable("Benefactors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1998, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactPhone = "0958675421",
                            Email = "Benefactor1@gmail.com",
                            Login = "Benefactor1",
                            NameID = 7,
                            Password = "Benefactor1",
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(6037),
                            RoleID = 4,
                            SurnameID = 15
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1993, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactPhone = "0558675469",
                            Email = "Benefactor2@gmail.com",
                            Login = "Benefactor2",
                            NameID = 12,
                            Password = "Benefactor2",
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(6056),
                            RoleID = 4,
                            SurnameID = 1
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1989, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactPhone = "0667845123",
                            Email = "Benefactor3@gmail.com",
                            Login = "Benefactor3",
                            NameID = 14,
                            Password = "Benefactor3",
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(6061),
                            RoleID = 4,
                            SurnameID = 6
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2002, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactPhone = "0963584756",
                            Email = "Benefactor4@gmail.com",
                            Login = "Benefactor4",
                            NameID = 12,
                            Password = "Benefactor4",
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(6065),
                            RoleID = 4,
                            SurnameID = 11
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCategory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            NameCategory = "Дорослі"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            NameCategory = "Діти"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            NameCategory = "Військові"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            NameCity = "Київ"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            NameCity = "Дніпро"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            NameCity = "Полтава"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            NameCity = "Харків"
                        },
                        new
                        {
                            Id = 5,
                            Desc = "",
                            NameCity = "Львів"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.ContactPhones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HospitalsRepresentativeID")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalsRepresentativeID");

                    b.ToTable("ContactPhones");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Diagnoses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameDiagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diagnoses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            NameDiagnosis = "Проникаюче поранення суглоба"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            NameDiagnosis = "Вибухове поранення множинне лівої нижньої кінціки"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            NameDiagnosis = "Проникаюче поранення живота"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            NameDiagnosis = "Аномалія Ебштейна"
                        },
                        new
                        {
                            Id = 5,
                            Desc = "",
                            NameDiagnosis = "Тетрада Фалло"
                        },
                        new
                        {
                            Id = 6,
                            Desc = "",
                            NameDiagnosis = "Кардіоміопатія"
                        },
                        new
                        {
                            Id = 7,
                            Desc = "",
                            NameDiagnosis = "Проникаюче поранення грудної порожнини"
                        },
                        new
                        {
                            Id = 8,
                            Desc = "",
                            NameDiagnosis = "Хронічна серцева недостатность"
                        },
                        new
                        {
                            Id = 9,
                            Desc = "",
                            NameDiagnosis = "Мієлодиспластичний синдром"
                        },
                        new
                        {
                            Id = 10,
                            Desc = "",
                            NameDiagnosis = "Апластична анемія"
                        },
                        new
                        {
                            Id = 11,
                            Desc = "",
                            NameDiagnosis = "Хронічна ниркова  недостатність (ХНН V)"
                        },
                        new
                        {
                            Id = 12,
                            Desc = "",
                            NameDiagnosis = "Пухлина головного мозку"
                        },
                        new
                        {
                            Id = 13,
                            Desc = "",
                            NameDiagnosis = "Пухлина головного мозку"
                        },
                        new
                        {
                            Id = 14,
                            Desc = "",
                            NameDiagnosis = "Гідроцефалія набута"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Entrances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumbEntrance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Entrances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            NumbEntrance = 1
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            NumbEntrance = 2
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            NumbEntrance = 3
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            NumbEntrance = 4
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.FundraisingStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFundraisingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FundraisingStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "Відкритий, мета збору не досягнуа, час збору не завершився",
                            NameFundraisingStatus = "Актуально"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "Призупинений через певні об'єктивні причини",
                            NameFundraisingStatus = "Призупинено"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "Завершено недосягнувши Мети",
                            NameFundraisingStatus = "Завершено"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "Мета досягнуа, збір закрито",
                            NameFundraisingStatus = "Закрито"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameGender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            NameGender = "Чоловік"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            NameGender = "Жінка"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Hospitals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DonationAmount")
                        .HasColumnType("int");

                    b.Property<int>("EntranceID")
                        .HasColumnType("int");

                    b.Property<int>("HouseID")
                        .HasColumnType("int");

                    b.Property<string>("Linc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameHospital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.HasIndex("EntranceID");

                    b.HasIndex("HouseID");

                    b.HasIndex("StreetID");

                    b.ToTable("Hospitals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityID = 1,
                            Desc = "НДСЛ «Охматдит» – багатопрофільний діагностично-лікувальний заклад, який надає спеціалізовану висококваліфіковану медичну допомогу дитячому населенню України. Найбільша дитяча лікарня в Україні. На сьогодні НДСЛ «Охматдит» МОЗ України – сучасна лікувально-діагностична установа, де виконуються реконструктивно-пластичні операції, пересадка кісткового мозку (в т.ч. від неродинного донора), хірургічна корекція складних вроджених вад розвитку у новонароджених дітей, виходжування за сучасними технологіями глибоко недоношених дітей, онконейрохірургія, діагностика та лікування ретинопатії новонароджених, функціонує потужний медико-генетичний центр для діагностики та лікування рідкісних спадкових та генетичних захворювань у дітей тощо.",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HouseID = 1,
                            Linc = "https://ohmatdyt.com.ua/",
                            NameHospital = "НДСЛ «Охматдит»",
                            StreetID = 1
                        },
                        new
                        {
                            Id = 2,
                            CityID = 4,
                            Desc = "На сьогоднішній день Харківська обласна клінічна травматологічна лікарня - це провідний центр по роботі з ОДС. Ретельно підібраний персонал проводить діагностику, лікування та реабілітацію пацієнтів з найрізноманітнішими клінічними картинами. Головним правилом клініки травматології та ортопедії є дотримання комплексу декомпрессіонних вправ на спеціалізованих тренажерах. Під кожен випадок нами розробляється індивідуальна програма.",
                            DonationAmount = 0,
                            EntranceID = 2,
                            HouseID = 2,
                            Linc = "https://oktl.kh.ua/",
                            NameHospital = "КНП Харківської обласної ради «Обласна клінічна травматологічна лікарня»",
                            StreetID = 2
                        },
                        new
                        {
                            Id = 3,
                            CityID = 2,
                            Desc = "Дніпропетровська обласна клінічна лікарня імені І. І. Мечникова[2]  — одна з найстаріших багатопрофільних лікувальних медичних установ України, обласний центр спеціалізованої хірургічної допомоги.",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HouseID = 3,
                            Linc = "https://oktl.kh.ua/",
                            NameHospital = "БО ДОБФ «Лікарня ім. І.І. МЕЧНИКОВА»",
                            StreetID = 3
                        },
                        new
                        {
                            Id = 4,
                            CityID = 3,
                            Desc = "Обласна клінічна лікарня відновного лікування та діагностики, яка заснована 11 лютого 1947 року, сьогодні є одним з найсучасніших  лікувально-профілактичних закладів області.",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HouseID = 4,
                            Linc = "http://www.oklvld.pl.ua/",
                            NameHospital = "Обласна клінічна лікарня відновного лікування та діагностики",
                            StreetID = 4
                        },
                        new
                        {
                            Id = 5,
                            CityID = 1,
                            Desc = "Історія Інституту починається з 1955 року, коли на базі 24-ї міської лікарні м. Києва М. М. Амосовим була відкрита перша в Україні спеціалізована клініка серцевої хірургії, яка в 1957 р. перейшла до Українського НДІ туберкульозу, в 1961 р. перейменованого в Київський НДІ туберкульозу і грудної хірургії. В 1983 р. ця клініка серцевої хірургії реорганізована в Київський НДІ серцево-судинної хірургії Міністерства охорони здоров’я України, з 1993 р. – Інститут серцево-судинної хірургії (ІССХ) АМН України.",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HouseID = 5,
                            Linc = "https://amosovinstitute.org.ua/",
                            NameHospital = "Інститут серцево-судинної хірургії (ІССХ) АМН України",
                            StreetID = 5
                        },
                        new
                        {
                            Id = 6,
                            CityID = 5,
                            Desc = "Центр трансплантології Першого медоб'єднання Львова — лідер за кількістю пересаджених органів в Україні. Функціонує з 2020 року. Відтоді тут виконано понад 250 трансплантацій нирок, печінки, серця, легень та підшлункової залози. \r\nУсі медичні послуги з трансплантації оплачуються державним коштом. Тому для пацієнта трансплантація БЕЗКОШТОВНА.",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HouseID = 6,
                            Linc = "https://emergency-hospital.lviv.ua/tsentry/tsentr-transplantolohii",
                            NameHospital = "Центр трансплантології Першого медоб'єднання Львова",
                            StreetID = 6
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.HospitalsCharitableContributions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Bank_account_of_benefactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BenefactorID")
                        .HasColumnType("int");

                    b.Property<string>("Card_number_of_benefactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<string>("Notate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BenefactorID");

                    b.HasIndex("HospitalID");

                    b.HasIndex("WardID");

                    b.ToTable("HospitalsCharitableContributions");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.HospitalsPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<string>("WayToPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalID");

                    b.ToTable("HospitalsPhotos");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.HospitalsRepresentatives", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NameID")
                        .HasColumnType("int");

                    b.Property<string>("Notate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatronymicID")
                        .HasColumnType("int");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("SurnameID")
                        .HasColumnType("int");

                    b.Property<int?>("WardID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.HasIndex("GenderID");

                    b.HasIndex("HospitalID");

                    b.HasIndex("NameID");

                    b.HasIndex("PatronymicID");

                    b.HasIndex("PositionID");

                    b.HasIndex("RoleID");

                    b.HasIndex("SurnameID");

                    b.HasIndex("WardID");

                    b.ToTable("HospitalsRepresentatives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1987, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 1,
                            ContactPhone = "0678943567",
                            Email = "Hosp1ward1@gmail.com",
                            GenderID = 2,
                            HospitalID = 1,
                            Login = "Hosp1ward1",
                            NameID = 14,
                            Notate = "",
                            Password = "Hosp1ward1",
                            PatronymicID = 8,
                            PositionID = 3,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(5490),
                            RoleID = 2,
                            SurnameID = 16,
                            WardID = 4
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1989, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 1,
                            ContactPhone = "0665483157",
                            Email = "Hosp1ward2@gmail.com",
                            GenderID = 2,
                            HospitalID = 1,
                            Login = "Hosp1ward2",
                            NameID = 6,
                            Notate = "",
                            Password = "Hosp1ward2",
                            PatronymicID = 16,
                            PositionID = 8,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(5574),
                            RoleID = 2,
                            SurnameID = 8,
                            WardID = 5
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1974, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 1,
                            ContactPhone = "0667842357",
                            Email = "Hosp1ward3@gmail.com",
                            GenderID = 1,
                            HospitalID = 1,
                            Login = "Hosp1ward3",
                            NameID = 13,
                            Notate = "",
                            Password = "Hosp1ward3",
                            PatronymicID = 15,
                            PositionID = 2,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(5584),
                            RoleID = 2,
                            SurnameID = 11,
                            WardID = 6
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1969, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 1,
                            ContactPhone = "0554236987",
                            Email = "Hosp1ward4@gmail.com",
                            GenderID = 2,
                            HospitalID = 1,
                            Login = "Hosp1ward4",
                            NameID = 12,
                            Notate = "",
                            Password = "Hosp1ward4",
                            PatronymicID = 14,
                            PositionID = 7,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(5591),
                            RoleID = 2,
                            SurnameID = 6,
                            WardID = 7
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1968, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 4,
                            ContactPhone = "0654215854",
                            Email = "Hosp2@gmail.com",
                            GenderID = 1,
                            HospitalID = 2,
                            Login = "Hosp2",
                            NameID = 8,
                            Notate = "",
                            Password = "Hosp2",
                            PatronymicID = 10,
                            PositionID = 5,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(5597),
                            RoleID = 2,
                            SurnameID = 4
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(1975, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 2,
                            ContactPhone = "0993265789",
                            Email = "Hosp3@gmail.com",
                            GenderID = 2,
                            HospitalID = 3,
                            Login = "Hosp3",
                            NameID = 2,
                            Notate = "",
                            Password = "Hosp3",
                            PatronymicID = 8,
                            PositionID = 6,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(5610),
                            RoleID = 2,
                            SurnameID = 9
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1975, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 3,
                            ContactPhone = "",
                            Email = "Hosp4@gmail.com",
                            GenderID = 2,
                            HospitalID = 4,
                            Login = "Hosp4",
                            NameID = 4,
                            Notate = "",
                            Password = "Hosp4",
                            PatronymicID = 6,
                            PositionID = 1,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(5621),
                            RoleID = 2,
                            SurnameID = 5
                        },
                        new
                        {
                            Id = 8,
                            BirthDate = new DateTime(1979, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 1,
                            ContactPhone = "0954615795",
                            Email = "Hosp5ward1@gmail.com",
                            GenderID = 1,
                            HospitalID = 5,
                            Login = "Hosp5ward1",
                            NameID = 5,
                            Notate = "",
                            Password = "Hosp5ward1",
                            PatronymicID = 11,
                            PositionID = 4,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(5629),
                            RoleID = 2,
                            SurnameID = 13,
                            WardID = 1
                        },
                        new
                        {
                            Id = 9,
                            BirthDate = new DateTime(1985, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 1,
                            ContactPhone = "0553491267",
                            Email = "Hosp5ward2@gmail.com",
                            GenderID = 2,
                            HospitalID = 5,
                            Login = "Hosp5ward1",
                            NameID = 16,
                            Notate = "",
                            Password = "Hosp5ward1",
                            PatronymicID = 12,
                            PositionID = 9,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(5636),
                            RoleID = 2,
                            SurnameID = 10,
                            WardID = 2
                        },
                        new
                        {
                            Id = 10,
                            BirthDate = new DateTime(1990, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 1,
                            ContactPhone = "0684815123",
                            Email = "Hosp5ward3@gmail.com",
                            GenderID = 2,
                            HospitalID = 5,
                            Login = "Hosp5ward3",
                            NameID = 18,
                            Notate = "",
                            Password = "Hosp5ward3",
                            PatronymicID = 10,
                            PositionID = 11,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(5642),
                            RoleID = 2,
                            SurnameID = 7,
                            WardID = 3
                        },
                        new
                        {
                            Id = 11,
                            BirthDate = new DateTime(1989, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityID = 5,
                            ContactPhone = "0501278456",
                            Email = "Hosp6@gmail.com",
                            GenderID = 2,
                            HospitalID = 6,
                            Login = "Hosp6",
                            NameID = 2,
                            Notate = "",
                            Password = "Hosp6",
                            PatronymicID = 14,
                            PositionID = 10,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(5655),
                            RoleID = 2,
                            SurnameID = 12
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Houses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumbHouse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Houses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            NumbHouse = "28/1"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            NumbHouse = "266"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            NumbHouse = "14"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            NumbHouse = "10"
                        },
                        new
                        {
                            Id = 5,
                            Desc = "",
                            NumbHouse = "6"
                        },
                        new
                        {
                            Id = 6,
                            Desc = "",
                            NumbHouse = "9"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Names", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Names");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            Name = "Андрій"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "Анна"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "Артем"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "Вікторія"
                        },
                        new
                        {
                            Id = 5,
                            Desc = "",
                            Name = "Богдан"
                        },
                        new
                        {
                            Id = 6,
                            Desc = "",
                            Name = "Єва"
                        },
                        new
                        {
                            Id = 7,
                            Desc = "",
                            Name = "Давид"
                        },
                        new
                        {
                            Id = 8,
                            Desc = "",
                            Name = "Злата"
                        },
                        new
                        {
                            Id = 9,
                            Desc = "",
                            Name = "Данило"
                        },
                        new
                        {
                            Id = 10,
                            Desc = "",
                            Name = "Катерина"
                        },
                        new
                        {
                            Id = 11,
                            Desc = "",
                            Name = "Дмитро"
                        },
                        new
                        {
                            Id = 12,
                            Desc = "",
                            Name = "Мирослава"
                        },
                        new
                        {
                            Id = 13,
                            Desc = "",
                            Name = "Максим"
                        },
                        new
                        {
                            Id = 14,
                            Desc = "",
                            Name = "Марія"
                        },
                        new
                        {
                            Id = 15,
                            Desc = "",
                            Name = "Матвій"
                        },
                        new
                        {
                            Id = 16,
                            Desc = "",
                            Name = "Мілана"
                        },
                        new
                        {
                            Id = 17,
                            Desc = "",
                            Name = "Марк"
                        },
                        new
                        {
                            Id = 18,
                            Desc = "",
                            Name = "Софія"
                        },
                        new
                        {
                            Id = 19,
                            Desc = "",
                            Name = "Микола"
                        },
                        new
                        {
                            Id = 20,
                            Desc = "",
                            Name = "Соломія"
                        },
                        new
                        {
                            Id = 21,
                            Desc = "",
                            Name = "Олександр"
                        },
                        new
                        {
                            Id = 22,
                            Desc = "",
                            Name = "Джульєта"
                        },
                        new
                        {
                            Id = 23,
                            Desc = "",
                            Name = "Відар"
                        },
                        new
                        {
                            Id = 24,
                            Desc = "",
                            Name = "Юстінія"
                        },
                        new
                        {
                            Id = 25,
                            Desc = "",
                            Name = "Ілай"
                        },
                        new
                        {
                            Id = 26,
                            Desc = "",
                            Name = "Жива"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Partners", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Linc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePartners")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Partners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Linc = "https://tabletochki.org/?utm_source=google.g&utm_medium=cpc&utm_campaign=18598589187&utm_term=tabletochki&utm_content=628336089002&gad_source=1&gclid=CjwKCAjw_ZC2BhAQEiwAXSgClq_iiioQDMNQ8LrMTTn4MRMp1Cw8BC4HbtP8KWXMON5MttAnlqWVFRoCoygQAvD_BwE",
                            NamePartners = "Tabletochki",
                            Notate = "Лікування раку складне і тривале. Та навіть під час війни «Таблеточки» залишаються поруч із сім’ями, які зіткнулись з дитячим раком, на кожному етапі. Обстеження, придбання ліків в Україні та за кордоном, психологічна та паліативна підтримка, соціальна реабілітація, проживання біля лікарні — по цю та іншу адресну допомогу можна звернутися до фонду."
                        },
                        new
                        {
                            Id = 2,
                            Linc = "https://zerocancer.org/",
                            NamePartners = "ZERO Prostate Cancer",
                            Notate = "Ми разом подолаємо рак простати\r\nОтримайте доступ до життєво необхідної інформації та підтримки, зв’яжіться з іншими в спільноті хворих на рак передміхурової залози та вживайте заходів, щоб ZERO від раку простати."
                        },
                        new
                        {
                            Id = 3,
                            Linc = "https://www.unicef.org/ukraine/",
                            NamePartners = "UNICEF",
                            Notate = "ЮНІСЕФ працює у 190 країнах і територіях для охоплення найуразливіших дітей та молоді, які найбільше потребують допомоги. Організація працюємо над тим, щоб зберегти їхні життя. Захистити їхні права. Уберегти їх від шкоди. Дати їм дитинство, в якому вони будуть захищеними, здоровими та освіченими. Дати їм рівні можливості реалізувати свій потенціал, щоб одного дня вони могли зробити світ кращим."
                        },
                        new
                        {
                            Id = 4,
                            Linc = "https://ucf.in.ua/",
                            NamePartners = "Український культурний фонд",
                            Notate = "Український культурний фонд – державна установа, створена у 2017 році, на підставі відповідного Закону України, з метою сприяння розвитку національної культури та мистецтва в державі, забезпечення сприятливих умов для розвитку інтелектуального та духовного потенціалу особистості і суспільства, широкого доступу громадян до національного культурного надбання, підтримки культурного розмаїття та інтеграції української культури у світовий культурний простір. Підтримка проектів Українським культурним фондом здійснюється на конкурсних засадах."
                        },
                        new
                        {
                            Id = 5,
                            Linc = "https://ridni.org.ua/?gad_source=1&gclid=CjwKCAjw_ZC2BhAQEiwAXSgCls6FKpoSHuN_lOSC02vxHQ1X2xiij4U47olk0g9AqA44zJKgV5hViRoCS6QQAvD_BwE",
                            NamePartners = "Ridni",
                            Notate = "Подолання сирітства та розвиток інституту сім’ї.\r\n\r\nПрацюють заради того, щоб кожна дитина зростала у люблячій сім 'ї з духовними цінностями та мала щасливе майбутнє. Для цього організація надає дітям та дорослим психологічну, соціальну, освітню підтримку. Забезпечує консультаційний супровід усиновлювачів, батьків-вихователів дитячих будинків сімейного типу та прийомних сімей."
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.PartnersRepresentatives", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NameID")
                        .HasColumnType("int");

                    b.Property<string>("Notate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartnerID")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatronymicID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("SurnameID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("NameID");

                    b.HasIndex("PartnerID");

                    b.HasIndex("PatronymicID");

                    b.HasIndex("RoleID");

                    b.HasIndex("SurnameID");

                    b.ToTable("PartnersRepresentatives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1997, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactPhone = "0668912435",
                            Email = "Partner1@gmail.com",
                            Login = "Partner1",
                            NameID = 3,
                            PartnerID = 1,
                            Password = "Partner1",
                            PatronymicID = 7,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(6176),
                            RoleID = 3,
                            SurnameID = 6
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2001, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactPhone = "0672536149",
                            Email = "Partner2@gmail.com",
                            Login = "Partner2",
                            NameID = 8,
                            PartnerID = 2,
                            Password = "Partner2",
                            PatronymicID = 10,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(6189),
                            RoleID = 3,
                            SurnameID = 12
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1996, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactPhone = "0964528753",
                            Email = "Partner3@gmail.com",
                            Login = "Partner3",
                            NameID = 4,
                            PartnerID = 3,
                            Password = "Partner3",
                            PatronymicID = 12,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(6193),
                            RoleID = 3,
                            SurnameID = 11
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2002, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactPhone = "0995873654",
                            Email = "Partner4@gmail.com",
                            Login = "Partner4",
                            NameID = 6,
                            PartnerID = 4,
                            Password = "Partner4",
                            PatronymicID = 8,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(6198),
                            RoleID = 3,
                            SurnameID = 5
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(2001, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactPhone = "0975249875",
                            Email = "Partner5@gmail.com",
                            Login = "Partner5",
                            NameID = 4,
                            PartnerID = 5,
                            Password = "Partner5",
                            PatronymicID = 8,
                            RegisterDate = new DateTime(2024, 8, 21, 0, 35, 36, 998, DateTimeKind.Local).AddTicks(6203),
                            RoleID = 3,
                            SurnameID = 1
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.PatientPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("WayToPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientPhotos");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Patients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bank_account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bank_card_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Descript_patient_and_disease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiagnosesId")
                        .HasColumnType("int");

                    b.Property<int>("DiagnosisID")
                        .HasColumnType("int");

                    b.Property<int>("DonationAmount")
                        .HasColumnType("int");

                    b.Property<int>("FeeAmount")
                        .HasColumnType("int");

                    b.Property<int>("FundraisingStatusID")
                        .HasColumnType("int");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<string>("Inn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NameID")
                        .HasColumnType("int");

                    b.Property<string>("Notate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatronymicID")
                        .HasColumnType("int");

                    b.Property<int>("SurnameID")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentCategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("WardID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CityID");

                    b.HasIndex("DiagnosesId");

                    b.HasIndex("FundraisingStatusID");

                    b.HasIndex("GenderID");

                    b.HasIndex("HospitalID");

                    b.HasIndex("NameID");

                    b.HasIndex("PatronymicID");

                    b.HasIndex("SurnameID");

                    b.HasIndex("TreatmentCategoryID");

                    b.HasIndex("WardID");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bank_account = "UA010000001568456978544123",
                            Bank_card_number = "1568456978544123",
                            BirthDate = new DateTime(1990, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 3,
                            CityID = 5,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 1,
                            DonationAmount = 0,
                            FeeAmount = 180000,
                            FundraisingStatusID = 1,
                            GenderID = 1,
                            HospitalID = 4,
                            Inn = "1568456978",
                            NameID = 7,
                            Notate = "",
                            PatronymicID = 7,
                            SurnameID = 1,
                            TreatmentCategoryID = 1
                        },
                        new
                        {
                            Id = 2,
                            Bank_account = "UA010000001246796423589124",
                            Bank_card_number = "1246796423589124",
                            BirthDate = new DateTime(1982, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 1,
                            CityID = 2,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 8,
                            DonationAmount = 0,
                            FeeAmount = 230000,
                            FundraisingStatusID = 1,
                            GenderID = 2,
                            HospitalID = 5,
                            Inn = "1246796423",
                            NameID = 10,
                            Notate = "",
                            PatronymicID = 2,
                            SurnameID = 4,
                            TreatmentCategoryID = 1,
                            WardID = 2
                        },
                        new
                        {
                            Id = 3,
                            Bank_account = "UA010000004563789542631284",
                            Bank_card_number = "4563789542631284",
                            BirthDate = new DateTime(1991, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 3,
                            CityID = 1,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 2,
                            DonationAmount = 0,
                            FeeAmount = 600000,
                            FundraisingStatusID = 1,
                            GenderID = 1,
                            HospitalID = 6,
                            Inn = "4563789542",
                            NameID = 1,
                            Notate = "",
                            PatronymicID = 9,
                            SurnameID = 7,
                            TreatmentCategoryID = 3
                        },
                        new
                        {
                            Id = 4,
                            Bank_account = "UA010000002596345678412578",
                            Bank_card_number = "2596345678412578",
                            BirthDate = new DateTime(2023, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 2,
                            CityID = 3,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 5,
                            DonationAmount = 0,
                            FeeAmount = 250000,
                            FundraisingStatusID = 1,
                            GenderID = 2,
                            HospitalID = 5,
                            Inn = "2596345678",
                            NameID = 2,
                            Notate = "",
                            PatronymicID = 8,
                            SurnameID = 11,
                            TreatmentCategoryID = 2,
                            WardID = 3
                        },
                        new
                        {
                            Id = 5,
                            Bank_account = "UA010000005489632452478965",
                            Bank_card_number = "5489632452478965",
                            BirthDate = new DateTime(2019, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 2,
                            CityID = 1,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 10,
                            DonationAmount = 0,
                            FeeAmount = 400000,
                            FundraisingStatusID = 1,
                            GenderID = 2,
                            HospitalID = 1,
                            Inn = "5489632452",
                            NameID = 4,
                            Notate = "",
                            PatronymicID = 6,
                            SurnameID = 5,
                            TreatmentCategoryID = 1,
                            WardID = 7
                        },
                        new
                        {
                            Id = 6,
                            Bank_account = "UA010000002587963245617896",
                            Bank_card_number = "2587963245617896",
                            BirthDate = new DateTime(2018, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 2,
                            CityID = 4,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 12,
                            DonationAmount = 0,
                            FeeAmount = 360000,
                            FundraisingStatusID = 1,
                            GenderID = 2,
                            HospitalID = 1,
                            Inn = "2587963245",
                            NameID = 8,
                            Notate = "",
                            PatronymicID = 4,
                            SurnameID = 3,
                            TreatmentCategoryID = 1,
                            WardID = 4
                        },
                        new
                        {
                            Id = 7,
                            Bank_account = "UA010000002574128956122345",
                            Bank_card_number = "2574128956122345",
                            BirthDate = new DateTime(1988, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 3,
                            CityID = 5,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 3,
                            DonationAmount = 0,
                            FeeAmount = 170000,
                            FundraisingStatusID = 1,
                            GenderID = 1,
                            HospitalID = 3,
                            Inn = "2574128956",
                            NameID = 9,
                            Notate = "",
                            PatronymicID = 3,
                            SurnameID = 2,
                            TreatmentCategoryID = 1
                        },
                        new
                        {
                            Id = 8,
                            Bank_account = "UA010000002893567817393719",
                            Bank_card_number = "2893567817393719",
                            BirthDate = new DateTime(2018, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 3,
                            CityID = 3,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 14,
                            DonationAmount = 0,
                            FeeAmount = 90000,
                            FundraisingStatusID = 1,
                            GenderID = 1,
                            HospitalID = 1,
                            Inn = "2893567817",
                            NameID = 5,
                            Notate = "",
                            PatronymicID = 11,
                            SurnameID = 13,
                            TreatmentCategoryID = 2,
                            WardID = 6
                        },
                        new
                        {
                            Id = 9,
                            Bank_account = "UA010000007595426215354868",
                            Bank_card_number = "7595426215354868",
                            BirthDate = new DateTime(2021, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 2,
                            CityID = 1,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 11,
                            DonationAmount = 0,
                            FeeAmount = 350000,
                            FundraisingStatusID = 1,
                            GenderID = 1,
                            HospitalID = 1,
                            Inn = "7595426215",
                            NameID = 9,
                            Notate = "",
                            PatronymicID = 5,
                            SurnameID = 6,
                            TreatmentCategoryID = 1,
                            WardID = 5
                        },
                        new
                        {
                            Id = 10,
                            Bank_account = "UA010000002165784598542345",
                            Bank_card_number = "2165784598542345",
                            BirthDate = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 2,
                            CityID = 4,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 4,
                            DonationAmount = 0,
                            FeeAmount = 620000,
                            FundraisingStatusID = 1,
                            GenderID = 2,
                            HospitalID = 5,
                            Inn = "2165784598",
                            NameID = 6,
                            Notate = "",
                            PatronymicID = 10,
                            SurnameID = 8,
                            TreatmentCategoryID = 1,
                            WardID = 3
                        },
                        new
                        {
                            Id = 11,
                            Bank_account = "UA010000002596368514857452",
                            Bank_card_number = "2596368514857452",
                            BirthDate = new DateTime(1990, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 3,
                            CityID = 5,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 7,
                            DonationAmount = 0,
                            FeeAmount = 420000,
                            FundraisingStatusID = 1,
                            GenderID = 1,
                            HospitalID = 5,
                            Inn = "2596368514",
                            NameID = 11,
                            Notate = "",
                            PatronymicID = 15,
                            SurnameID = 9,
                            TreatmentCategoryID = 1,
                            WardID = 1
                        },
                        new
                        {
                            Id = 12,
                            Bank_account = "UA010000003694561275429863",
                            Bank_card_number = "3694561275429863",
                            BirthDate = new DateTime(2011, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 2,
                            CityID = 1,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 9,
                            DonationAmount = 0,
                            FeeAmount = 120000,
                            FundraisingStatusID = 1,
                            GenderID = 2,
                            HospitalID = 1,
                            Inn = "3694561275",
                            NameID = 14,
                            Notate = "",
                            PatronymicID = 12,
                            SurnameID = 11,
                            TreatmentCategoryID = 2,
                            WardID = 6
                        },
                        new
                        {
                            Id = 13,
                            Bank_account = "UA010000003644552388964543",
                            Bank_card_number = "3644552388964543",
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 2,
                            CityID = 2,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 9,
                            DonationAmount = 0,
                            FeeAmount = 460000,
                            FundraisingStatusID = 1,
                            GenderID = 2,
                            HospitalID = 1,
                            Inn = "3644552388",
                            NameID = 12,
                            Notate = "",
                            PatronymicID = 16,
                            SurnameID = 14,
                            TreatmentCategoryID = 1,
                            WardID = 7
                        },
                        new
                        {
                            Id = 14,
                            Bank_account = "UA010000005645122378896554",
                            Bank_card_number = "5645122378896554",
                            BirthDate = new DateTime(2017, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 2,
                            CityID = 4,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 13,
                            DonationAmount = 0,
                            FeeAmount = 600000,
                            FundraisingStatusID = 1,
                            GenderID = 2,
                            HospitalID = 1,
                            Inn = "5645122378",
                            NameID = 16,
                            Notate = "",
                            PatronymicID = 14,
                            SurnameID = 12,
                            TreatmentCategoryID = 1,
                            WardID = 4
                        },
                        new
                        {
                            Id = 15,
                            Bank_account = "UA010000002585963674148213",
                            Bank_card_number = "2585963674148213",
                            BirthDate = new DateTime(1987, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 1,
                            CityID = 1,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 8,
                            DonationAmount = 0,
                            FeeAmount = 60000,
                            FundraisingStatusID = 1,
                            GenderID = 1,
                            HospitalID = 5,
                            Inn = "2585963674",
                            NameID = 13,
                            Notate = "",
                            PatronymicID = 13,
                            SurnameID = 16,
                            TreatmentCategoryID = 2,
                            WardID = 2
                        },
                        new
                        {
                            Id = 16,
                            Bank_account = "UA010000003695784365214896",
                            Bank_card_number = "3695784365214896",
                            BirthDate = new DateTime(1964, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 1,
                            CityID = 2,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 8,
                            DonationAmount = 0,
                            FeeAmount = 120000,
                            FundraisingStatusID = 1,
                            GenderID = 1,
                            HospitalID = 5,
                            Inn = "3695784365",
                            NameID = 19,
                            Notate = "",
                            PatronymicID = 11,
                            SurnameID = 15,
                            TreatmentCategoryID = 4,
                            WardID = 2
                        },
                        new
                        {
                            Id = 17,
                            Bank_account = "UA010000006456532123575455",
                            Bank_card_number = "6456532123575455",
                            BirthDate = new DateTime(1986, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 3,
                            CityID = 2,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 2,
                            DonationAmount = 0,
                            FeeAmount = 70000,
                            FundraisingStatusID = 1,
                            GenderID = 1,
                            HospitalID = 4,
                            Inn = "6456532123",
                            NameID = 11,
                            Notate = "",
                            PatronymicID = 9,
                            SurnameID = 17,
                            TreatmentCategoryID = 2
                        },
                        new
                        {
                            Id = 18,
                            Bank_account = "UA010000007645289634567812",
                            Bank_card_number = "7645289634567812",
                            BirthDate = new DateTime(1988, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 3,
                            CityID = 2,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 3,
                            DonationAmount = 0,
                            FeeAmount = 150000,
                            FundraisingStatusID = 1,
                            GenderID = 1,
                            HospitalID = 3,
                            Inn = "7645289634",
                            NameID = 15,
                            Notate = "",
                            PatronymicID = 7,
                            SurnameID = 12,
                            TreatmentCategoryID = 2
                        },
                        new
                        {
                            Id = 19,
                            Bank_account = "UA010000006587128953869784",
                            Bank_card_number = "6587128953869784",
                            BirthDate = new DateTime(1988, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 1,
                            CityID = 5,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 15,
                            DonationAmount = 0,
                            FeeAmount = 700000,
                            FundraisingStatusID = 1,
                            GenderID = 2,
                            HospitalID = 6,
                            Inn = "6587128953",
                            NameID = 16,
                            Notate = "",
                            PatronymicID = 8,
                            SurnameID = 14,
                            TreatmentCategoryID = 1
                        },
                        new
                        {
                            Id = 20,
                            Bank_account = "UA010000007542152686425378",
                            Bank_card_number = "7542152686425378",
                            BirthDate = new DateTime(1993, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryID = 1,
                            CityID = 4,
                            Descript_patient_and_disease = "",
                            DiagnosisID = 15,
                            DonationAmount = 0,
                            FeeAmount = 100000,
                            FundraisingStatusID = 1,
                            GenderID = 1,
                            HospitalID = 6,
                            Inn = "7542152686",
                            NameID = 15,
                            Notate = "",
                            PatronymicID = 11,
                            SurnameID = 6,
                            TreatmentCategoryID = 2
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.PatientsCharitableContributions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BenefactorID")
                        .HasColumnType("int");

                    b.Property<string>("Card_number_of_benefactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BenefactorID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientsCharitableContributions");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Patronymics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patronymics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            Patronymic = "Миколайович"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Patronymic = "Миколаївна"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Patronymic = "Володимирович"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Patronymic = "Володимирівна"
                        },
                        new
                        {
                            Id = 5,
                            Desc = "",
                            Patronymic = "Олександрович"
                        },
                        new
                        {
                            Id = 6,
                            Desc = "",
                            Patronymic = "Олександрівна"
                        },
                        new
                        {
                            Id = 7,
                            Desc = "",
                            Patronymic = "Іванович"
                        },
                        new
                        {
                            Id = 8,
                            Desc = "",
                            Patronymic = "Іванівна"
                        },
                        new
                        {
                            Id = 9,
                            Desc = "",
                            Patronymic = "Васильович"
                        },
                        new
                        {
                            Id = 10,
                            Desc = "",
                            Patronymic = "Василівна"
                        },
                        new
                        {
                            Id = 11,
                            Desc = "",
                            Patronymic = "Сергійович"
                        },
                        new
                        {
                            Id = 12,
                            Desc = "",
                            Patronymic = "Сергіївна"
                        },
                        new
                        {
                            Id = 13,
                            Desc = "",
                            Patronymic = "Вікторович"
                        },
                        new
                        {
                            Id = 14,
                            Desc = "",
                            Patronymic = "Вікторівна"
                        },
                        new
                        {
                            Id = 15,
                            Desc = "",
                            Patronymic = "Михайлович"
                        },
                        new
                        {
                            Id = 16,
                            Desc = "",
                            Patronymic = "Михайлівна"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Positions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePositions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            NamePositions = "Лікар"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            NamePositions = "Лікар-лаборант"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            NamePositions = "Лікар-інтерн"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            NamePositions = "Лікар-методист"
                        },
                        new
                        {
                            Id = 5,
                            Desc = "",
                            NamePositions = "Лікар-стажист"
                        },
                        new
                        {
                            Id = 6,
                            Desc = "",
                            NamePositions = "Лаборант"
                        },
                        new
                        {
                            Id = 7,
                            Desc = "",
                            NamePositions = "Сестра медична"
                        },
                        new
                        {
                            Id = 8,
                            Desc = "",
                            NamePositions = "Фельдшер"
                        },
                        new
                        {
                            Id = 9,
                            Desc = "",
                            NamePositions = "Реєстратор медичний"
                        },
                        new
                        {
                            Id = 10,
                            Desc = "",
                            NamePositions = "Молодша медична сестра"
                        },
                        new
                        {
                            Id = 11,
                            Desc = "",
                            NamePositions = "Старша медична сестра"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "Адміністратор з повними правами дотупа",
                            NameRole = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "Предтавник медичного закладу, має доступ на створення нової картки пацієнта та перегляду всіх зборів його мадичного закладу",
                            NameRole = "hospitalsRepresent"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "Предтавни партнера, має дотуп на перегляд всіх зборів, та окремо зборів, яким було надано допомогу даним партнером",
                            NameRole = "partner"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "БлагодійникЮ, що зареєструвався на платформі. Має дотуп на перегляд всіх актуальних зборів, та окремо зборів, яким було надано допомогу даним благодійником(в тому числі  закритих)",
                            NameRole = "benefactorRegistered"
                        },
                        new
                        {
                            Id = 5,
                            Desc = "БлагодійникЮ, що не зареєструваний на платформі. Має дотуп на перегляд всіх актуальних зборів",
                            NameRole = "benefactorGuest"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.StreetTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameStreetTypes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StreetTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            NameStreetTypes = "вулиця"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            NameStreetTypes = "провулок"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            NameStreetTypes = "площа"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            NameStreetTypes = "шое"
                        },
                        new
                        {
                            Id = 5,
                            Desc = "",
                            NameStreetTypes = ""
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Streets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetTypesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreetTypesId");

                    b.ToTable("Streets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            NameStreet = "Чорновола",
                            StreetTypesId = 1
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            NameStreet = "Салтівське",
                            StreetTypesId = 4
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            NameStreet = "Соборна",
                            StreetTypesId = 3
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            NameStreet = "Шевченка",
                            StreetTypesId = 1
                        },
                        new
                        {
                            Id = 5,
                            Desc = "",
                            NameStreet = "Амосова",
                            StreetTypesId = 1
                        },
                        new
                        {
                            Id = 6,
                            Desc = "",
                            NameStreet = "Миколайчука",
                            StreetTypesId = 1
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Surnames", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Surnames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            Surname = "Мельник"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Surname = "Шевченко"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Surname = "Коваленко"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Surname = "Бондаренко"
                        },
                        new
                        {
                            Id = 5,
                            Desc = "",
                            Surname = "Бойко"
                        },
                        new
                        {
                            Id = 6,
                            Desc = "",
                            Surname = "Ткаченко"
                        },
                        new
                        {
                            Id = 7,
                            Desc = "",
                            Surname = "Кравченко"
                        },
                        new
                        {
                            Id = 8,
                            Desc = "",
                            Surname = "Ковальчук"
                        },
                        new
                        {
                            Id = 9,
                            Desc = "",
                            Surname = "Коваль"
                        },
                        new
                        {
                            Id = 10,
                            Desc = "",
                            Surname = "Олійник"
                        },
                        new
                        {
                            Id = 11,
                            Desc = "",
                            Surname = "Акименко"
                        },
                        new
                        {
                            Id = 12,
                            Desc = "",
                            Surname = "Бабченко"
                        },
                        new
                        {
                            Id = 13,
                            Desc = "",
                            Surname = "Багрій"
                        },
                        new
                        {
                            Id = 14,
                            Desc = "",
                            Surname = "Багрій"
                        },
                        new
                        {
                            Id = 15,
                            Desc = "",
                            Surname = "Максимейко"
                        },
                        new
                        {
                            Id = 16,
                            Desc = "",
                            Surname = "Сало"
                        },
                        new
                        {
                            Id = 17,
                            Desc = "",
                            Surname = "Грінка"
                        },
                        new
                        {
                            Id = 18,
                            Desc = "",
                            Surname = "Стопка"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.TreatmentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameTreatmentCategory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TreatmentCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            NameTreatmentCategory = "Лікування"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            NameTreatmentCategory = "Реабілітація"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            NameTreatmentCategory = "Протезування"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            NameTreatmentCategory = "Підтимка життедіяльності"
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Wards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DonationAmount")
                        .HasColumnType("int");

                    b.Property<int>("EntranceID")
                        .HasColumnType("int");

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<int>("HouseID")
                        .HasColumnType("int");

                    b.Property<string>("Linc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.HasIndex("EntranceID");

                    b.HasIndex("HospitalID");

                    b.HasIndex("HouseID");

                    b.HasIndex("StreetID");

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityID = 1,
                            Desc = "Історично це було перше відділення кардіо-торакальної хірургії на базі Київського НДІ серцево-судинної хірургії МОЗ України, засноване М.М. Амосовим. З моменту створення і по теперішній час кураторами відділу завжди були директори Інституту, академіки, – спершу М.М. Амосов, потім Г.В. Книшов, на теперішній час – В.В. Лазоришинець.\r\n\r\nЩорічно у відділенні оперують в середньому 600 пацієнтів. Хірургічна активність включає увесь спектр кардіохірургічних втручань: лікування ішемічної хвороби серця (як інтервенційне – експертні стентування стовбурових уражень, стентування при багатосудинному ураженні пацієнтів з високим кардіохірургічним ризиком та пацієнтів з обтяженою коморбідністю, так і хірургічне), критичних клапанних вад серця (набуті та вроджені), життєвозагрозливих порушень ритму серця, патології аорти (як ендоваскулярне, так і хірургічне), захворювання перикарду, плеври, міокарду (ГКМП, ДКМП, амілоїдоз, міокардити), хірургічне лікування аневризм лівого шлуночка та постінфарктні розриви міжшлуночкової перетинки. Більшість кардіохірургічних втручань з реваскуляризації міокарду відбуваються на працюючому серці (off-pump CABG у 96% випадків). У межах відділення виконуються також операції з міні-доступу (шунтування MIDCAB) та тотальна артеріальна реваскуляризація (TAR).",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HospitalID = 5,
                            HouseID = 5,
                            Linc = "https://amosovinstitute.org.ua/2023/07/06/viddilennya-ekstrenoyi-ta-nevidkladnoyi-kardiohirurgiyi/",
                            NameWard = "Відділення воєнної та інноваційної кардіохірургії",
                            StreetID = 5
                        },
                        new
                        {
                            Id = 2,
                            CityID = 1,
                            Desc = "ОСНОВНІ НАПРЯМИ РОБОТИ:\r\n\r\nТрансплантація серця та робота над впровадженням в рутинну практику трансплантації комплексу легені-серце та імплантації пристроїв механічної підтримки кровообігу;\r\nОперативне, інтервенційне та терапевтичне лікування всіх варіантів кардіоміопатій та хронічної серцевої недостатності із застосуванням найсучасніших методик інвазивних та консервативних втручань;\r\nУнікальна операція Феррацці при гіпертрофічній кардіоміопатії з високими показниками якості життя у віддаленому періоді. Досягнуто найвищого європейського рівня виконаних операцій Феррацці за рік.\r\nТранскатетерна алкогольна септальна абляція, як альтернатива у пацієнтів з гіпертрофічною кардіоміопатією при наявності протипоказань до відкритих оперативних втручань;\r\nІмплантація ресинхронізаційних штучних водіїв ритму серця при кардіоміопатіях з важкими порушеннями серцевої провідності;\r\nПротезування та пластичні операції для корекція клапанних вад серця, у тому числі у пацієнтів зі зниженою фракцією викиду лівого шлуночка;\r\nЄвропейський підхід до стратегії медикаментозного лікування та хірургії. Більшість лікарів відділення пройшли тривалі стажування у провідних клініках Європи.",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HospitalID = 5,
                            HouseID = 5,
                            Linc = "https://amosovinstitute.org.ua/2023/07/03/viddil-hirurgichnogo-likuvannya-sertsevoyi-nedostatnosti-ta-mehanichnoyi-pidtrimki-sertsya-i-legen/",
                            NameWard = "Відділення хірургічного лікування патології міокарда, трансплантації та механічної підтримки серця і легень",
                            StreetID = 5
                        },
                        new
                        {
                            Id = 3,
                            CityID = 1,
                            Desc = "Відділення хірургічного лікування вроджених вад серця у новонароджених та дітей молодшого віку",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HospitalID = 5,
                            HouseID = 5,
                            Linc = "Відділення хірургічного лікування вроджених вад серця у новонароджених та дітей молодшого віку",
                            NameWard = "Відділення хірургічного лікування вроджених вад серця у новонароджених та дітей молодшого віку",
                            StreetID = 5
                        },
                        new
                        {
                            Id = 4,
                            CityID = 1,
                            Desc = "Відділення дитячої нейрохірургії створено  у 2018 році з метою покращення надання високоспеціалізованої медичної допомоги дітям з нейрохірургічною патологією. У відділенні надається висококваліфікована медична допомога дітям у віці від 0 до 18 років із різноманітною нейрохірургічною патологією. Відділення є клінічною базою кафедри дитячої хірургії Національного медичного університету ім. О.О. Богомольця.",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HospitalID = 1,
                            HouseID = 1,
                            Linc = "https://ohmatdyt.com.ua/viddilennya-nejrohirurgiyi/",
                            NameWard = "Відділення дитячої нейрохірургії",
                            StreetID = 1
                        },
                        new
                        {
                            Id = 5,
                            CityID = 1,
                            Desc = "Відділення інтенсивної терапії хронічних інтоксикацій складається з 25 ліжок з 4 ліжками денного стаціонару. У відділенні знаходяться на лікуванні діти від 0 до 18 років з термінальною стадією ниркової недостатності, які потребують проведення замісної ниркової терапії.",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HospitalID = 1,
                            HouseID = 1,
                            Linc = "HospitalID=1, CityID=1, StreetID=1, HouseID=1, EntranceID=1,",
                            NameWard = "Відділення інтенсивної та еферентної терапії хронічних інтоксикацій зі стаціонаром денного перебування",
                            StreetID = 1
                        },
                        new
                        {
                            Id = 6,
                            CityID = 1,
                            Desc = "Вiддiлення відновлювального лікування є одним iз пiдроздiлiв Національної дитячої спеціалізованої лiкарнi “Охматдит”. Основним завданням його с надання профілактичної, лікувальної та реабілітаційної допомоги дітям, які знаходяться на стаціонарному лікуванні.",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HospitalID = 1,
                            HouseID = 1,
                            Linc = "https://ohmatdyt.com.ua/viddilennya-vidnovnogo-likuvannya/",
                            NameWard = "Відділення відновлювального лікування\r\n",
                            StreetID = 1
                        },
                        new
                        {
                            Id = 7,
                            CityID = 1,
                            Desc = "Відділення інтенсивної хіміотерапії надає високоспеціалізовану консультативну та лікувальну медичну допомогу дітям  з різних регіонів України з онкогематологічними та гематологічними захворюваннями  на основі сучасних методів діагностики, комплексного лікування у відповідності до міжнародних стандартів діагностики та лікування дітей з онкогематологічними та гематологічними захворюваннями, затвердженими МОЗ України. У відділенні впроваджуються передові методи лікування гемобластозів, найбільш ефективні терапевтичні протоколи, пілотні програми, комбіновані технології лікування.",
                            DonationAmount = 0,
                            EntranceID = 1,
                            HospitalID = 1,
                            HouseID = 1,
                            Linc = "Відділення інтенсивної хіміотерапії",
                            NameWard = "Відділення інтенсивної хіміотерапії",
                            StreetID = 1
                        });
                });

            modelBuilder.Entity("HealthLifeProject.Entities.WardsPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.Property<string>("WayToPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("WardID");

                    b.ToTable("WardsPhotos");
                });

            modelBuilder.Entity("WebApp.Entities.NavagateLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NavagateLinkId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NavagateLinkId");

                    b.ToTable("NavagateLink");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Href = "/",
                            Order = 1,
                            Title = "Головна"
                        },
                        new
                        {
                            Id = 2,
                            Href = "/about/index",
                            Order = 1,
                            Title = "Про нас"
                        },
                        new
                        {
                            Id = 3,
                            Href = "/about/index",
                            Order = 1,
                            Title = "Пацієнти"
                        },
                        new
                        {
                            Id = 4,
                            Href = "/about/index",
                            Order = 2,
                            ParentId = 3,
                            Title = "Категорії"
                        },
                        new
                        {
                            Id = 5,
                            Href = "/about/index",
                            Order = 2,
                            ParentId = 3,
                            Title = "Напрямок лікування"
                        },
                        new
                        {
                            Id = 6,
                            Href = "/about/index",
                            Order = 2,
                            ParentId = 3,
                            Title = "Стать"
                        },
                        new
                        {
                            Id = 7,
                            Href = "/about/index",
                            Order = 2,
                            ParentId = 3,
                            Title = "Міста"
                        },
                        new
                        {
                            Id = 8,
                            Href = "/about/index",
                            Order = 2,
                            ParentId = 3,
                            Title = "Медичні установи"
                        },
                        new
                        {
                            Id = 9,
                            Href = "/about/index",
                            Order = 2,
                            ParentId = 3,
                            Title = "Відділення"
                        },
                        new
                        {
                            Id = 10,
                            Href = "/about/index",
                            Order = 3,
                            ParentId = 9,
                            Title = "Діагнози"
                        },
                        new
                        {
                            Id = 11,
                            Href = "/about/index",
                            Order = 1,
                            Title = "Медичні установи"
                        });
                });

            modelBuilder.Entity("WebApp.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Benefactors", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.Roles", "Role")
                        .WithMany("Benefactors")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.ContactPhones", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.HospitalsRepresentatives", "HospitalsRepresentative")
                        .WithMany()
                        .HasForeignKey("HospitalsRepresentativeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospitalsRepresentative");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Hospitals", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.Cities", "City")
                        .WithMany("Hospitals")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Entrances", "Entrance")
                        .WithMany("Hospitals")
                        .HasForeignKey("EntranceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Houses", "House")
                        .WithMany("Hospitals")
                        .HasForeignKey("HouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Streets", "Street")
                        .WithMany("Hospitals")
                        .HasForeignKey("StreetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Entrance");

                    b.Navigation("House");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.HospitalsCharitableContributions", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.Benefactors", "Benefactor")
                        .WithMany()
                        .HasForeignKey("BenefactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Hospitals", "Hospital")
                        .WithMany("CharitableContributions")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Wards", "Ward")
                        .WithMany("CharitableContributions")
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Benefactor");

                    b.Navigation("Hospital");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.HospitalsPhotos", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.Hospitals", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.HospitalsRepresentatives", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.Cities", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Hospitals", "Hospital")
                        .WithMany("HospitalsRepresentatives")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Names", "Name")
                        .WithMany("HospitalsRepresentatives")
                        .HasForeignKey("NameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Patronymics", "Patronymic")
                        .WithMany("HospitalsRepresentatives")
                        .HasForeignKey("PatronymicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Positions", "Position")
                        .WithMany("HospitalsRepresentatives")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Roles", "Role")
                        .WithMany("HospitalsRepresentatives")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Surnames", "Surname")
                        .WithMany("HospitalsRepresentatives")
                        .HasForeignKey("SurnameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Wards", "Ward")
                        .WithMany("HospitalsRepresentatives")
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("Hospital");

                    b.Navigation("Name");

                    b.Navigation("Patronymic");

                    b.Navigation("Position");

                    b.Navigation("Role");

                    b.Navigation("Surname");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.PartnersRepresentatives", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.Cities", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("HealthLifeProject.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("HealthLifeProject.Entities.Names", "Name")
                        .WithMany()
                        .HasForeignKey("NameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Partners", "Partner")
                        .WithMany("PartnersRepresentatives")
                        .HasForeignKey("PartnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Patronymics", "Patronymic")
                        .WithMany()
                        .HasForeignKey("PatronymicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Surnames", "Surname")
                        .WithMany()
                        .HasForeignKey("SurnameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("Name");

                    b.Navigation("Partner");

                    b.Navigation("Patronymic");

                    b.Navigation("Role");

                    b.Navigation("Surname");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.PatientPhotos", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.Patients", "Patient")
                        .WithMany("PatientPhotos")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Patients", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.Category", "Category")
                        .WithMany("Patients")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Cities", "City")
                        .WithMany("Patients")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Diagnoses", null)
                        .WithMany("Patients")
                        .HasForeignKey("DiagnosesId");

                    b.HasOne("HealthLifeProject.Entities.FundraisingStatuses", "FundraisingStatus")
                        .WithMany("Patients")
                        .HasForeignKey("FundraisingStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Gender", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Hospitals", "Hospital")
                        .WithMany("Patients")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Names", "Name")
                        .WithMany("Patients")
                        .HasForeignKey("NameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Patronymics", "Patronymic")
                        .WithMany("Patients")
                        .HasForeignKey("PatronymicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Surnames", "Surname")
                        .WithMany("Patients")
                        .HasForeignKey("SurnameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.TreatmentCategory", "TreatmentCategory")
                        .WithMany("Patients")
                        .HasForeignKey("TreatmentCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Wards", "Ward")
                        .WithMany("Patients")
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("FundraisingStatus");

                    b.Navigation("Gender");

                    b.Navigation("Hospital");

                    b.Navigation("Name");

                    b.Navigation("Patronymic");

                    b.Navigation("Surname");

                    b.Navigation("TreatmentCategory");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.PatientsCharitableContributions", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.Benefactors", "Benefactor")
                        .WithMany()
                        .HasForeignKey("BenefactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Benefactor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Streets", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.StreetTypes", "StreetType")
                        .WithMany("Streets")
                        .HasForeignKey("StreetTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreetType");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Wards", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.Cities", "City")
                        .WithMany("Wards")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Entrances", "Entrance")
                        .WithMany("Wards")
                        .HasForeignKey("EntranceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Hospitals", "Hospital")
                        .WithMany("Wards")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Houses", "House")
                        .WithMany("Wards")
                        .HasForeignKey("HouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthLifeProject.Entities.Streets", "Street")
                        .WithMany("Wards")
                        .HasForeignKey("StreetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Entrance");

                    b.Navigation("Hospital");

                    b.Navigation("House");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.WardsPhotos", b =>
                {
                    b.HasOne("HealthLifeProject.Entities.Wards", "Ward")
                        .WithMany()
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("WebApp.Entities.NavagateLink", b =>
                {
                    b.HasOne("WebApp.Entities.NavagateLink", null)
                        .WithMany("Childs")
                        .HasForeignKey("NavagateLinkId");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Category", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Cities", b =>
                {
                    b.Navigation("Hospitals");

                    b.Navigation("Patients");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Diagnoses", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Entrances", b =>
                {
                    b.Navigation("Hospitals");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.FundraisingStatuses", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Gender", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Hospitals", b =>
                {
                    b.Navigation("CharitableContributions");

                    b.Navigation("HospitalsRepresentatives");

                    b.Navigation("Patients");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Houses", b =>
                {
                    b.Navigation("Hospitals");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Names", b =>
                {
                    b.Navigation("HospitalsRepresentatives");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Partners", b =>
                {
                    b.Navigation("PartnersRepresentatives");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Patients", b =>
                {
                    b.Navigation("PatientPhotos");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Patronymics", b =>
                {
                    b.Navigation("HospitalsRepresentatives");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Positions", b =>
                {
                    b.Navigation("HospitalsRepresentatives");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Roles", b =>
                {
                    b.Navigation("Benefactors");

                    b.Navigation("HospitalsRepresentatives");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.StreetTypes", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Streets", b =>
                {
                    b.Navigation("Hospitals");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Surnames", b =>
                {
                    b.Navigation("HospitalsRepresentatives");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.TreatmentCategory", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HealthLifeProject.Entities.Wards", b =>
                {
                    b.Navigation("CharitableContributions");

                    b.Navigation("HospitalsRepresentatives");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("WebApp.Entities.NavagateLink", b =>
                {
                    b.Navigation("Childs");
                });
#pragma warning restore 612, 618
        }
    }
}
